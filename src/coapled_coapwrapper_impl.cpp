
// Generated by slyft.io
// This code part has been generated on an "as is" basis, without warranties or conditions of any kind.

// endpoint implementation


    #include "Arduino.h"

#include "microcoap/coap.h"
#include "coapled_app.h"

#include "digital.h"



void TUT1__coapled__print_packet(const char *prefix, const coap_packet_t *pkt) {
    Serial.printf(prefix);
    Serial.printf(" COAP_HEADER:");
    Serial.printf(" ver=0x%02X", pkt->hdr.ver);
    Serial.printf(",t=0x%02X", pkt->hdr.t);
    Serial.printf(",tkl=0x%02X", pkt->hdr.tkl);
    Serial.printf(",code=0x%02X", pkt->hdr.code);
    Serial.printf(",id=0x%02X%02X", pkt->hdr.id[0], pkt->hdr.id[1]);
    if (pkt->tok.len > 0) {
        Serial.printf(",tok=0x");
        for (int i = 0; i < pkt->tok.len; i++) {
            Serial.printf("%02X",pkt->tok.p[i]);
        }
    }
    Serial.println();
    Serial.printf(prefix);
    Serial.printf(" OPTIONS");
    Serial.printf("(num=%d): ", pkt->numopts);
    for (int i = 0; i < pkt->numopts; i++) {
        Serial.printf("%d:num=%d,val=",i,pkt->opts[i].num);
        for ( int j = 0; j < pkt->opts[i].buf.len; j++) {
            Serial.printf("%c", pkt->opts[i].buf.p[j]);
        }
        Serial.print(",");
    }
    Serial.println();
    Serial.printf(prefix);
    Serial.printf(" PAYLOAD(len=%d): 0x", pkt->payload.len);
    if (pkt->payload.len > 0) {
        for (int i = 0; i < pkt->payload.len; i++) {
            Serial.printf("%02X ",pkt->payload.p[i]);
        }
    }
    Serial.println();
}


#define COAP_MAKERESPONSE_INTERNALSERVERERROR \
return coap_make_response(scratch, \
  outpkt, (uint8_t*)outbuf, 0, \
  id_hi, id_lo, \
  &inpkt->tok, \
  (coap_responsecode_t)MAKE_RSPCODE(5, 0), COAP_CONTENTTYPE_NONE \
  );

#define COAP_MAKERESPONSE_BADREQUEST \
return coap_make_response(scratch, \
  outpkt, (uint8_t*)outbuf, 0, \
  id_hi, id_lo, \
  &inpkt->tok, \
  COAP_RSPCODE_BAD_REQUEST, COAP_CONTENTTYPE_NONE \
  );

#define RSPCODE_CLASS(rsp)  (rsp >> 5)
#define RSPCODE_DETAIL(rsp) (rsp & 31)

extern const coap_endpoint_t endpoints[];

static char well_known_rsp[256] = "\0";


int TUT1__coapled__handle_get_well_known_core(coap_rw_buffer_t *scratch,
    const coap_packet_t *inpkt, coap_packet_t *outpkt,
    uint8_t id_hi, uint8_t id_lo) {
    Serial.println("TUT1__coapled__handle_get_well_known_core");
    TUT1__coapled__print_packet("TUT1__coapled__handle_get_well_known_core>REQ>", inpkt);

    if (well_known_rsp[0] == '\0') {
        // set up response
        uint16_t len = sizeof(well_known_rsp);
        const coap_endpoint_t *ep = endpoints;
        char *rsp = well_known_rsp;
        int i;

        len--; // Null-terminated string

        while(NULL != ep->handler)
        {
          if (NULL == ep->core_attr) {
            ep++;
            continue;
          }

          if (0 < strlen(rsp)) {
            strncat(rsp, ",", len);
            len--;
          }

          strncat(rsp, "<", len);
          len--;

          for (i = 0; i < ep->path->count; i++) {
            strncat(rsp, "/", len);
            len--;

            strncat(rsp, ep->path->elems[i], len);
            len -= strlen(ep->path->elems[i]);
          }

          strncat(rsp, ">;", len);
          len -= 2;

          strncat(rsp, ep->core_attr, len);
          len -= strlen(ep->core_attr);

          ep++;
        }
    }


    int res = coap_make_response(scratch, outpkt, (const uint8_t *)well_known_rsp, strlen(well_known_rsp), id_hi, id_lo, &inpkt->tok, COAP_RSPCODE_CONTENT, COAP_CONTENTTYPE_APPLICATION_LINKFORMAT);

   TUT1__coapled__print_packet("TUT1__coapled__handle_get_well_known_core>RESP>", outpkt);

    return res;
}


// define coap handler functions

// Protocol-level handler for POST requests to /digital
int TUT1__coapled__handle_post___digital(coap_rw_buffer_t *scratch,
    const coap_packet_t *inpkt, coap_packet_t *outpkt,
    uint8_t id_hi, uint8_t id_lo) {

    Serial.println("TUT1__coapled__handle_post___digital");
    TUT1__coapled__print_packet("TUT1__coapled__handle_post___digital>REQ>", inpkt);

    // processing
    uint8_t outbuf[512];
    mpack_memset(outbuf,0,sizeof(outbuf));
    size_t resp_len = 0;
    coap_responsecode_t  resp_code;
    coap_content_type_t  resp_content_type = COAP_CONTENTTYPE_NONE;

    struct TUT1__coapled__post___digital_req    req;
    struct TUT1__coapled__post___digital_resp   resp;

    // handle input body
    TUT1__digital_init(&(req.data.digital));
    int parse_res = req.data.digital.TUT1__digital_parse(&(req.data.digital),inpkt->payload.p, (uint32_t)inpkt->payload.len);
    if (parse_res != 0) {
        Serial.println("TUT1__coapled__handle_post___digital: Error parsing input body, type=digital. ->BAD_REQUEST");
        // get out here, unable to parse the request data
        COAP_MAKERESPONSE_BADREQUEST
    };
    Serial.println("TUT1__coapled__handle_post___digital: Parsing input body, type=digital successful");



    TUT1__digital_init(&(resp.data.digital_205));


    Serial.println("TUT1__coapled__handle_post___digital: Forwarding to TUT1__coapled__post___digital");
    // forward req,resp structs to application handler
    bool handled = TUT1__coapled__post___digital(&req, &resp);
    Serial.print("TUT1__coapled__handle_post___digital: returned from TUT1__coapled__post___digital: "); Serial.println(handled);

    if (handled) {
      // take response code from resp
      resp_code = resp.response_code;
      // form the response body
      if ( RSPCODE_CLASS(resp_code) == 2 && RSPCODE_DETAIL(resp_code) == 05) {
        Serial.println("TUT1__coapled__handle_post___digital: Serializing response for code=205, schema=digital");
        // handle code 205, schema is digital
        resp_len = resp.data.digital_205.TUT1__digital_serialize(&(resp.data.digital_205), outbuf, sizeof(outbuf));
        resp_content_type = COAP_CONTENTTYPE_APPLICATION_OCTECT_STREAM;
        Serial.print("TUT1__coapled__handle_post___digital: Serializing done, len="); Serial.println(resp_len);
      }


      int res = coap_make_response(scratch,
        outpkt,
        (uint8_t*)outbuf, resp_len,
        id_hi, id_lo,
        &inpkt->tok,
        resp_code, resp_content_type
      );
      TUT1__coapled__print_packet("TUT1__coapled__handle_post___digital>RESP>", outpkt);
      return res;
    } else {
      Serial.print("TUT1__coapled__handle_post___digital: -> INTERNAL_SERVER_ERROR");
      COAP_MAKERESPONSE_INTERNALSERVERERROR
    }

}
